"vi /usr/local/Cellar/vim/7.4.1016/share/vim/vim74/ftplugin/python.vim,
"http://vim.1045645.n5.nabble.com/FileType-conditional-td1141787.html
"let g:loaded_youcompleteme = 0

" for paste mode toggle
set pastetoggle=<F2>
map <F4> :%retab! <CR> :w <CR>
" http://vim.wikia.com/wiki/Fix_indentation, 自动格式化代码
"map <F5> mzgg=G`z`

"for mac os crontab
autocmd filetype crontab setlocal nobackup nowritebackup
map <M-s> :w<kEnter>  "Works in normal mode, must press Esc first"
imap <M-s> <Esc>:w<kEnter>i "Works in insert mode, saves and puts back in insert mode"
autocmd BufWritePre * :%s/\s\+$//ge

"set list listchars=eol:¬,tab:▸\ ,trail:.,
" keep 3 lines when scrolling"
set scrolloff=3
set shiftround

set undofile
set undodir=~/.Vim_undodir
set undolevels=1000

set guifont=Monaco:h16
set guifont=Monaco\ for\ Powerline\ Plus\ Nerd\ File\ Types:h11
set backupdir=~/.Vimbackup
set cursorline
"setlocal textwidth=80
set tags=tags
set noautochdir    " 注意这个自动切换目录会使rope找目录不正确，禁用，坑死我
autocmd BufRead,BufNewFile *.py set et ts=4 sw=4 sts=4
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set nu
if has('gui_running')
    set background=dark
else
    set background=dark
endif

" 配置多语言环境
if has("multi_byte")
" UTF-8 编码
set encoding=utf-8
set termencoding=utf-8
set formatoptions+=mM
set fencs=utf-8,gbk

"if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
"set ambiwidth=double
"endif

if has("win32")
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
language messages zh_CN.utf-8
endif
else
echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif

source $VIMRUNTIME/vimrc_example.vim
set langmenu=en_US
let $LANG= 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set splitright
"turn off vim compatible check
set nocompatible
"check file type
set completeopt=longest,menu
"histroy line count
set history=1000
set showmatch
"left-down status line
set ruler
"auto match targets
set incsearch
"high light search
set hlsearch
"auto backup file with filename+~
"set backup
set title
set foldenable
"fold code by syntax 'cmd':
"'zi' open/close all folds
"'za' open/close current fold
"'zM' close all folds
"'zR' open all folds
set foldmethod=indent
"set foldmethod=marker
"set foldmethod=indent
set foldcolumn=0
set foldopen=all
"set foldclose=all
"colorscheme evening
"set cinoptions+={2,0,p0,t0
set formatoptions=tcqr
set nu
let Tlist_Ctags_Cmd='/usr/local/bin/Ctags'
"map <F7> <Esc>:<CR>
"nnoremap <silent><F7> :WMToggle<CR>
let Tlist_Show_One_File = 1 " 不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1 " 如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1 " 在右侧窗口中显示taglist窗口
let Tlist_File_Fold_Auto_Close=1 " 自动折叠当前非编辑文件的方法列表
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1
let Tlist_Use_Right_Window = 0
nnoremap tg :!/usr/local/bin/ctags -R *<CR>
nnoremap wm :WMToggle<cr>
nnoremap gc :!gcc -Wall -g -o %:r %<cr>
"nnoremap gp :!g++ -Wall -g -o %:r %<cr>
nnoremap py :!python %<cr>
nnoremap pt :!py.test %<cr>
nnoremap no :!node %<cr>
"nnoremap gd :!sudo gdb %:r<cr>
"nnoremap ma :!make<cr>
nnoremap ex :!./%:r<cr>
"nnoremap tg :Tlist<cr>
"let g:winManagerWindowLayout='FileExplorer'
let g:winManagerWindowLayout = 'FileExplorer,BufExplorer|TagList'

set nocompatible                " be iMproved
filetype off                    " required!
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"for php
"Bundle 'joonty/vdebug'
Plugin 'ianva/vim-youdao-translater'  " https://github.com/ianva/vim-youdao-translater
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'fullybaked/toggle-numbers.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'rizzatti/dash.vim'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'jaxbot/semantic-highlight.vim'
Plugin 'lfv89/vim-interestingwords'    " https://github.com/lfv89/vim-interestingwords
Plugin 'tpope/vim-sensible'
Bundle "elzr/vim-json"
" Bundle 'captbaritone/better-indent-support-for-php-with-html'
" Bundle 'Shougo/vimproc'
" Bundle 'Shougo/unite.vim'
" Plugin 'shawncplus/phpcomplete.vim'
" Bundle 'm2mdas/phpcomplete-extended'
" Plugin 'stanangeloff/php.vim'
" Bundle 'joonty/vim-phpqa.git'
" endfor php
Plugin 'posva/vim-vue'
Plugin 'sekel/vim-vue-syntastic'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'PegasusWang/vim-ubuntu-pastebin'
Plugin 'ervandew/supertab'
Plugin 'tpope/vim-repeat'
Plugin 'jszakmeister/vim-togglecursor'
Plugin 'rking/ag.vim'
Plugin 'vim-scripts/LargeFile'
Plugin 'mhinz/vim-startify'
Plugin 'rykka/riv.vim'    " rst
Plugin 'kchmck/vim-coffee-script'
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'glench/vim-jinja2-syntax'
Plugin 'moll/vim-node'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-fugitive'
Plugin 'junegunn/gv.vim'    " https://github.com/junegunn/gv.vim git commit browser
" Plugin 'xuyuanp/nerdtree-git-plugin'
Plugin 'tpope/vim-eunuch'
Plugin 'cakebaker/scss-syntax.vim'
"Plugin 'gorodinskiy/vim-coloresque'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'marijnh/tern_for_vim'

" let Vundle manage Vundle
Plugin 'solarnz/thrift.vim'
Bundle 'gmarik/vundle'
Bundle 'Rykka/InstantRst'
Bundle 'vim-scripts/BufOnly.vim'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'suan/vim-instant-markdown'
Bundle 'jiangmiao/auto-pairs'
Plugin 'kien/rainbow_parentheses.vim'
Bundle 'sukima/xmledit'
Bundle 'mattn/emmet-vim'
Bundle 'heavenshell/vim-pydocstring'
" Bundle 'sjl/gundo.vim'
Bundle 'Valloric/ListToggle'
Bundle 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Bundle 'scrooloose/syntastic'
Bundle 'davidhalter/jedi-vim'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'kien/ctrlp.vim'
"Bundle 'Lokaltog/vim-powerline'
Bundle 'klen/python-mode'
Plugin 'fatih/vim-go'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'tpope/vim-surround'
Plugin 'yggdroot/indentline'    " 缩进线条
Plugin 'easymotion/vim-easymotion'    " 快速移动插件, ',,w'可以在单词上出现前缀，然后快速跳转
Plugin 'haya14busa/incsearch.vim'
Plugin 'haya14busa/incsearch-fuzzy.vim'
Plugin 'ryanoasis/vim-devicons'

Plugin 'xolox/vim-misc'
" Plugin 'xolox/vim-easytags'
" let g:easytags_python_enabled = 0
" let g:easytags_python_script = 0
" autocmd FileType python let b:easytags_auto_highlight = 0

" 模糊搜索，使用z/支持模糊搜索
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)


"Bundle 'Valloric/YouCompleteMe'
" Bundle 't9md/vim-quickhl'
Bundle 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1
" "..................................
" " vim-scripts repos
" Bundle 'YankRing.vim'
" Bundle 'vcscommand.vim'
" Bundle 'ShowPairs'
" Bundle 'SudoEdit.vim'
" Bundle 'EasyGrep'
" Bundle 'VOoM'
" Bundle 'VimIM'
" "..................................
" " non github repos
" " Bundle 'git://git.wincent.com/command-t.git'
" "......................................

call vundle#end()
filetype plugin indent on

" brew install vim --with-python3
nmap <silent> <C-d> <Plug>(pydocstring)
nnoremap py :!python %<cr>
" 用ctrl+l可以在insert和command模式都可以保存
inoremap <c-l> <c-o>:w<cr>
nnoremap <c-l> :w<cr>
" 切换 buffer
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> [n :bnext<CR>

let g:pymode_python = 'python'  " Values are `python`, `python3`, `disable`.
let g:pymode_trim_whitespaces = 1
let g:pymode_quickfix_maxheight = 3
let g:pymode_indent = 1
let g:pymode_folding = 1
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = "<C-k>"
let g:pymode_breakpoint_cmd = 'import ipdb; ipdb.set_trace()  # BREAKPOINT TODO REMOVE; from nose.tools import set_trace; set_trace()'


let g:pymode_run = 1
let g:pymode_run_bind = "<C-j>"
"let g:pymode_run_bind = '<leader>r'
let g:pymode_virtualenv = 1

" Override view python doc key shortcut to Ctrl-Shift-d
let g:pymode_doc=1
let g:pymode_doc_bind = 'K'

autocmd CompleteDone * pclose
let g:pymode_rope = 1
let g:pymode_rope_autoimport = 0
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_goto_definition_bind = "<C-]>"
let g:pymode_rope_goto_definition_cmd = 'vnew'
let g:pymode_rope_regenerate_on_write = 0
command R PymodeRopeRegenerate

let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_on_fly = 0
let g:pymode_lint_message = 1
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe', 'pylint']
" http://stackoverflow.com/questions/16021297/how-to-map-alias-a-command-in-vim, PymodeLint映射成PL
command P PymodeLint
let g:syntastic_python_checkers = ['pep8']
let g:pymode_lint_ignore = "C0111, W0105"
let g:pymode_lint_signs = 1
let g:pymode_lint_todo_symbol = '⚠️'
let g:pymode_lint_error_symbol = '❌'
let g:pymode_lint_comment_symbol = '😢'

" 修改默认的红线为浅色，solorized黑色主题
highlight ColorColumn ctermbg=233
let g:pymode_lint_cwindow = 0
let g:pymode_options_max_line_length = 120
let g:pymode_options_colorcolumn = 1
" 指定UltiSnips python的docstring风格, sphinx, google, numpy
let g:ultisnips_python_style = 'sphinx'


" For emmemt only avilable for html,css,sass
let g:user_emmet_install_global = 0
autocmd FileType html,php,mako,css,sass,scss,vue.html.javascript.css EmmetInstal
" emment key
let g:user_emmet_leader_key='<C-J>'


autocmd BufNewFile *.py,*.cc,*.sh,*.java exec ":call SetTitle()"
"新建.py,.cc,.java,.sh,
"定义函数SetTitle，自动插入文件头
func SetTitle()
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call setline(2, "\# -*- coding:utf-8 -*-")
        normal G
        normal o
        normal o
        call setline(5, "if __name__ == '__main__':")
        call setline(6, "    pass")

    endif
endfunc


function HeaderSh()
    call setline(1, "#!/usr/bin/env bash")
    normal G
    normal o
    normal o
endf
autocmd bufnewfile *.sh call HeaderSh()

" for nerdtree
"autocmd vimenter * NERDTree
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\~$', '__pycache__'] "ignore files in NERDTree
nnoremap <F10> :exe 'NERDTreeToggle'<CR>
nnoremap on :exe 'NERDTreeToggle' <CR>     " use on open nerdtree
nmap ,v :NERDTreeFind<cr>


" for Tagbarbar, sudo apt-get install ctags
"nmap <F8> :TagbarToggle<CR>
nnoremap <silent> <F8> :TagbarToggle<CR>
nnoremap ot :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0    " sort by sourcefile
"let g:tagbar_show_linenumbers = 1
set updatetime=1000    " ms update


" for airline
let g:airline_powerline_fonts=1
let g:airline_theme = 'wombat'
let g:airline#extensions#tabline#enabled = 1
function! ArilineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
    let g:airline_section_b = airline#section#create_left(['ffenc', 'hunks', '%F'])
    "let g:airline_section_c = airline#section#create(['filetype'])
    let g:airline_section_x = airline#section#create(['%P'])
    let g:airline_section_y = airline#section#create(['%B'])
    let g:airline_section_z = airline#section#create_right(['%l', '%c'])
endfunction
autocmd VimEnter * call ArilineInit()

" shortcuts to vimdiff, http://stackoverflow.com/questions/7309707/why-does-git-mergetool-opens-4-windows-in-vimdiff-id-expect-3
let mapleader=','
let g:mapleader=','

if &diff
    map <leader>1 :diffget LOCAL<CR>
    map <leader>2 :diffget BASE<CR>
    map <leader>3 :diffget REMOTE<CR>
endif

" change tab
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
" https://stackoverflow.com/questions/15583346/how-can-i-temporarily-make-the-window-im-working-on-to-be-fullscreen-in-vim
nnoremap tt :tab split<CR>

" 高亮当前选中单词
autocmd CursorMoved * exe exists("HlUnderCursor")?HlUnderCursor?printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\')):'match none':""
nnoremap <silent> <F3> :exe "let HlUnderCursor=exists(\"HlUnderCursor\")?HlUnderCursor*-1+1:1"<CR>


" rst书写插件
let proj1 = { 'path': '~/Program/python-web-guide',}
let g:riv_projects = [proj1]

" Plugin 'suan/vim-instant-markdown', :InstantMarkdownPreview
let g:instant_markdown_autostart = 0

" ctrlp, 在~/.agignore添加一行node_modules
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'


"http://vimawesome.com/plugin/scss-syntax-vim
au BufRead,BufNewFile *.scss set filetype=scss.css


"http://vimawesome.com/plugin/rainbow-parentheses-vim   花里胡哨的彩虹括号^_^
"http://www.wklken.me/posts/2015/06/07/vim-plugin-rainbowparentheses.html
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces


"语法检查配置
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_mode_map = { 'mode': 'active',
                            "\ 'active_filetypes': ['php', 'javascript'],
                            "\ 'passive_filetypes': [] }

let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': ['php']  }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
let g:syntastic_enable_javascript_checker = 1
let g:syntastic_javascript_eslint_exec = '/Users/pegasus/.nvm/versions/node/v4.0.0/bin/eslint'
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 3

let g:syntastic_error_symbol = '❌'
let g:syntastic_style_error_symbol = '⁉️'
let g:syntastic_warning_symbol = '⚠️'
let g:syntastic_style_warning_symbol = '💩'

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

" 评论配置
" let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1
let g:javascript_plugin_jsdoc = 1


"enable keyboard shortcuts
let g:tern_map_keys=1
"show argument hints
let g:tern_show_argument_hints='on_hold'
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_complete_in_comments = 1
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']

 "比较喜欢用tab来选择补全...
"function! MyTabFunction ()
    "let line = getline('.')
    "let substr = strpart(line, -1, col('.')+1)
    "let substr = matchstr(substr, "[^ \t]*$")
    "if strlen(substr) == 0
        "return "\<tab>"
    "endif
    "return pumvisible() ? "\<c-n>" : "\<c-x>\<c-o>"
"endfunction
"inoremap <tab> <c-r>=MyTabFunction()<cr>


let g:LargeFile=1


" for golang https://github.com/fatih/vim-go
" https://github.com/fatih/vim-go-tutorial
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
au FileType go nmap <leader>r <Plug>(go-run)


"for php
let g:syntastic_enable_php_checker = 0
let g:syntastic_php_checkers = ['php']  ", 'phpcs', 'phpmd']
let g:phpqa_codesniffer_args = "--standard=PSR2"
"let g:vdebug_options = {'ide_key': 'netbeans-xdebug'}
"let g:vdebug_options = {'break_on_open': 0}
"let g:vdebug_options = {'server': '127.0.0.1'}
"let g:vdebug_options = {'port': '9000'}

" for html
let g:syntastic_html_tidy_ignore_errors = [ '<template> is not recognized!' ]
let g:vim_json_syntax_conceal = 0

" https://github.com/wincent/wincent/blob/bff31c32e427c5913d1eed0b0c1b3da24e8ba8ba/roles/dotfiles/files/.vim/plugin/settings.vim#L38
if has('folding')
  if has('windows')
	set fillchars=vert:┃              " BOX DRAWINGS HEAVY VERTICAL (U+2503, UTF-8: E2 94 83)
  endif
  set foldmethod=indent               " not as cool as syntax, but faster
  set foldlevelstart=99               " start unfolded
endif

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j                " remove comment leader when joining comment lines
endif

set formatoptions+=n                  " smart auto-indenting inside numbered lists
set guioptions-=T                     " don't show toolbar
set hidden                            " allows you to hide buffers with unsaved changes without being prompted
set highlight+=c:LineNr               " blend vertical separators with line numbers
set laststatus=2                      " always show status line
set lazyredraw                        " don't bother updating screen during macro playback

" 退出快捷键
noremap <leader>e :q<cr>
noremap <leader>E :qa!<cr>
noremap <leader>b :bd<cr>
noremap <leader>s :vs<cr>  " vertical split
noremap <leader>r :e!<cr>  " reload without save

" https://github.com/lfv89/vim-interestingwords 高亮感兴趣的 word
nnoremap <silent> <leader>f :call InterestingWords('n')<cr>
nnoremap <silent> <leader>F :call UncolorAllWords()<cr>

" https://github.com/jaxbot/semantic-highlight.vim
nnoremap <Leader>h :SemanticHighlightToggle<cr>

" 禁止 startify 自动切换目录
let g:startify_change_to_dir = 0


" solarized 主题
let g:solarized_termtrans = 1
"let g:solarized_termcolors=256
set background=dark
colorscheme solarized
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"


" 用 ,a 搜索当前 cursor 下单词
noremap <leader>a :Ag! "<cword>"<cr>

" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

" Plugin 'fullybaked/toggle-numbers.vim'
nmap ,n :LineNumberToggle<cr>

" https://github.com/ianva/vim-youdao-translater settings
vnoremap <silent> <C-Y> :<C-u>Ydv<CR>
nnoremap <silent> <C-Y> :<C-u>Ydc<CR>
noremap <leader>yd :<C-u>Yde<CR>
